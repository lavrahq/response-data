- args:
    sql: CREATE EXTENSION IF NOT EXISTS pgcrypto;
  type: run_sql
- args:
    sql: "CREATE TABLE \"public\".\"locations\"(\"id\" uuid NOT NULL DEFAULT gen_random_uuid(),
      \"point\" geometry, \"name\" text NOT NULL, \"building\" text, \"street_id\"
      text NOT NULL, \"cross_street_id\" text, \"dispatching_sop\" text, \"responding_sop\"
      text, \"map_id\" uuid NOT NULL, \"created_at\" timestamptz NOT NULL DEFAULT
      now(), \"updated_at\" timestamptz NOT NULL DEFAULT now(), \"description\" text,
      PRIMARY KEY (\"id\") , FOREIGN KEY (\"street_id\") REFERENCES \"public\".\"map_streets\"(\"id\")
      ON UPDATE cascade ON DELETE restrict, FOREIGN KEY (\"cross_street_id\") REFERENCES
      \"public\".\"map_streets\"(\"id\") ON UPDATE cascade ON DELETE restrict, FOREIGN
      KEY (\"map_id\") REFERENCES \"public\".\"maps\"(\"id\") ON UPDATE cascade ON
      DELETE restrict);\nCREATE OR REPLACE FUNCTION \"public\".\"set_current_timestamp_updated_at\"()\nRETURNS
      TRIGGER AS $$\nDECLARE\n  _new record;\nBEGIN\n  _new := NEW;\n  _new.\"updated_at\"
      = NOW();\n  RETURN _new;\nEND;\n$$ LANGUAGE plpgsql;\nCREATE TRIGGER \"set_public_locations_updated_at\"\nBEFORE
      UPDATE ON \"public\".\"locations\"\nFOR EACH ROW\nEXECUTE PROCEDURE \"public\".\"set_current_timestamp_updated_at\"();\nCOMMENT
      ON TRIGGER \"set_public_locations_updated_at\" ON \"public\".\"locations\" \nIS
      'trigger to set value of column \"updated_at\" to current timestamp on row update';\n"
  type: run_sql
- args:
    name: locations
    schema: public
  type: add_existing_table_or_view
