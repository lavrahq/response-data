- args:
    cascade: false
    sql: |-
      CREATE OR REPLACE FUNCTION audit.if_modified_func() RETURNS TRIGGER AS $body$
      DECLARE
          audit_row audit.logged_actions;
          excluded_cols text[] = ARRAY[]::text[];
          new_r jsonb;
          old_r jsonb;
      BEGIN
          IF TG_WHEN <> 'AFTER' THEN
              RAISE EXCEPTION 'audit.if_modified_func() may only run as an AFTER trigger';
          END IF;

          audit_row = ROW(
              nextval('audit.logged_actions_event_id_seq'), -- event_id
              TG_TABLE_SCHEMA::text,                        -- schema_name
              TG_TABLE_NAME::text,                          -- table_name
              TG_RELID,                                     -- relation OID for much quicker searches
              session_user::text,                           -- session_user_name
              current_setting('hasura.user', 't')::jsonb,   -- user information from hasura graphql engine
              current_timestamp,                            -- action_tstamp_tx
              statement_timestamp(),                        -- action_tstamp_stm
              clock_timestamp(),                            -- action_tstamp_clk
              txid_current(),                               -- transaction ID
              current_setting('application_name'),          -- client application
              inet_client_addr(),                           -- client_addr
              inet_client_port(),                           -- client_port
              current_query(),                              -- top-level query or queries (if multistatement) from client
              substring(TG_OP,1,1),                         -- action
              NULL, NULL,                                   -- row_data, changed_fields
              'f'                                           -- statement_only
              );

          IF NOT TG_ARGV[0]::boolean IS DISTINCT FROM 'f'::boolean THEN
              audit_row.client_query = NULL;
          END IF;

          IF TG_ARGV[1] IS NOT NULL THEN
              excluded_cols = TG_ARGV[1]::text[];
          END IF;

          IF (TG_OP = 'UPDATE' AND TG_LEVEL = 'ROW') THEN
              old_r = to_jsonb(OLD);
              new_r = to_jsonb(NEW);
              audit_row.row_data = old_r - excluded_cols;
              SELECT
                jsonb_object_agg(new_t.key, new_t.value) - excluded_cols
              INTO
                audit_row.changed_fields
              FROM jsonb_each(old_r) as old_t
              JOIN jsonb_each(new_r) as new_t
                ON (old_t.key = new_t.key AND old_t.value <> new_t.value);
          ELSIF (TG_OP = 'DELETE' AND TG_LEVEL = 'ROW') THEN
              audit_row.row_data = to_jsonb(OLD) - excluded_cols;
          ELSIF (TG_OP = 'INSERT' AND TG_LEVEL = 'ROW') THEN
              audit_row.row_data = to_jsonb(NEW) - excluded_cols;
          ELSIF (TG_LEVEL = 'STATEMENT' AND TG_OP IN ('INSERT','UPDATE','DELETE','TRUNCATE')) THEN
              audit_row.statement_only = 't';
          ELSE
              RAISE EXCEPTION '[audit.if_modified_func] - Trigger func added as trigger for unhandled case: %, %',TG_OP, TG_LEVEL;
              RETURN NULL;
          END IF;
          INSERT INTO audit.logged_actions VALUES (audit_row.*);
          RETURN NULL;
      END;
      $body$
      LANGUAGE plpgsql
      SECURITY DEFINER
      SET search_path = pg_catalog, public;


      COMMENT ON FUNCTION audit.if_modified_func() IS $body$
      Track changes to a table at the statement and/or row level.

      Optional parameters to trigger in CREATE TRIGGER call:

      param 0: boolean, whether to log the query text. Default 't'.

      param 1: text[], columns to ignore in updates. Default [].

               Updates to ignored cols are omitted from changed_fields.

               Updates with only ignored cols changed are not inserted
               into the audit log.

               Almost all the processing work is still done for updates
               that ignored. If you need to save the load, you need to use
               WHEN clause on the trigger instead.

               No warning or error is issued if ignored_cols contains columns
               that do not exist in the target table. This lets you specify
               a standard set of ignored columns.

      There is no parameter to disable logging of values. Add this trigger as
      a 'FOR EACH STATEMENT' rather than 'FOR EACH ROW' trigger if you do not
      want to log row values.

      Note that the user name logged is the login role for the session. The audit trigger
      cannot obtain the active role because it is reset by the SECURITY DEFINER invocation
      of the audit trigger its self.
      $body$;



      CREATE OR REPLACE FUNCTION audit.audit_table(target_table regclass, audit_rows boolean, audit_query_text boolean, ignored_cols text[]) RETURNS void AS $body$
      DECLARE
        stm_targets text = 'INSERT OR UPDATE OR DELETE OR TRUNCATE';
        _q_txt text;
        _ignored_cols_snip text = '';
      BEGIN
          EXECUTE 'DROP TRIGGER IF EXISTS audit_trigger_row ON ' || target_table;
          EXECUTE 'DROP TRIGGER IF EXISTS audit_trigger_stm ON ' || target_table;

          IF audit_rows THEN
              IF array_length(ignored_cols,1) > 0 THEN
                  _ignored_cols_snip = ', ' || quote_literal(ignored_cols);
              END IF;
              _q_txt = 'CREATE TRIGGER audit_trigger_row AFTER INSERT OR UPDATE OR DELETE ON ' ||
                       target_table ||
                       ' FOR EACH ROW EXECUTE PROCEDURE audit.if_modified_func(' ||
                       quote_literal(audit_query_text) || _ignored_cols_snip || ');';
              RAISE NOTICE '%',_q_txt;
              EXECUTE _q_txt;
              stm_targets = 'TRUNCATE';
          ELSE
          END IF;

          _q_txt = 'CREATE TRIGGER audit_trigger_stm AFTER ' || stm_targets || ' ON ' ||
                   target_table ||
                   ' FOR EACH STATEMENT EXECUTE PROCEDURE audit.if_modified_func('||
                   quote_literal(audit_query_text) || ');';
          RAISE NOTICE '%',_q_txt;
          EXECUTE _q_txt;

      END;
      $body$
      language 'plpgsql';

      COMMENT ON FUNCTION audit.audit_table(regclass, boolean, boolean, text[]) IS $body$
      Add auditing support to a table.

      Arguments:
         target_table:     Table name, schema qualified if not on search_path
         audit_rows:       Record each row change, or only audit at a statement level
         audit_query_text: Record the text of the client query that triggered the audit event?
         ignored_cols:     Columns to exclude from update diffs, ignore updates that change only ignored cols.
      $body$;

      -- Pg doesn't allow variadic calls with 0 params, so provide a wrapper
      CREATE OR REPLACE FUNCTION audit.audit_table(target_table regclass, audit_rows boolean, audit_query_text boolean) RETURNS void AS $body$
      SELECT audit.audit_table($1, $2, $3, ARRAY[]::text[]);
      $body$ LANGUAGE SQL;

      -- And provide a convenience call wrapper for the simplest case
      -- of row-level logging with no excluded cols and query logging enabled.
      --
      CREATE OR REPLACE FUNCTION audit.audit_table(target_table regclass) RETURNS void AS $body$
      SELECT audit.audit_table($1, BOOLEAN 't', BOOLEAN 't');
      $body$ LANGUAGE 'sql';

      COMMENT ON FUNCTION audit.audit_table(regclass) IS $body$
      Add auditing support to the given table. Row-level changes will be logged with full client query text. No cols are ignored.
      $body$;
  type: run_sql
